// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RapydSDK
import CommonCrypto
import CoreLocation
import Foundation
@_exported import RapydSDK
import Swift
import UIKit
public enum RPDPayoutMethodTypeCategoryType : Swift.String {
  case bank
  case cash
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RPDPayoutManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func listPayoutMethodTypes(category: RapydSDK.RPDPayoutMethodTypeCategoryType?, payoutCurrency: RapydSDK.RPDCurrency?, beneficiaryCountry: RapydSDK.RPDCountry?, beneficiaryEntityType: RapydSDK.RPDEntityHolderType?, senderEntityType: RapydSDK.RPDEntityHolderType?, isCancelable: Swift.Bool?, isExpirable: Swift.Bool?, isLocationSpecific: Swift.Bool?, isOnline: Swift.Bool?, limit: Swift.UInt?, startingAfter afterPayoutMethodType: Swift.String?, endingBefore beforePayoutMethodType: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDPayoutMethodType]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func getPayoutRequiredFields(payoutMethodType: Swift.String, payoutAmount: Foundation.Decimal, payoutCurrency: RapydSDK.RPDCurrency, beneficiaryCountry: RapydSDK.RPDCountry, beneficiaryEntityType: RapydSDK.RPDEntityHolderType, senderCountry: RapydSDK.RPDCountry, senderCurrency: RapydSDK.RPDCurrency, senderEntityType: RapydSDK.RPDEntityHolderType, completionBlock: @escaping (RapydSDK.RPDPayoutRequiredFieldsDetails?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createPayout(payoutMethodType: Swift.String, payoutAmount: Foundation.Decimal, payoutCurrency: RapydSDK.RPDCurrency, beneficiary: [RapydSDK.RPDPayoutRequiredField]?, beneficiaryID: Swift.String?, beneficiaryCountry: RapydSDK.RPDCountry, beneficiaryEntityType: RapydSDK.RPDEntityHolderType, sender: [RapydSDK.RPDPayoutRequiredField]?, senderID: Swift.String?, senderCountry: RapydSDK.RPDCountry, senderCurrency: RapydSDK.RPDCurrency, senderEntityType: RapydSDK.RPDEntityHolderType, description: Swift.String?, metadata: [Swift.String : Any]?, merchantReferenceID: Swift.String?, confirmAutomatically: Swift.Bool?, expiration: Foundation.TimeInterval?, identifierType: Swift.String?, identifierValue: Swift.String?, completionBlock: @escaping (RapydSDK.RPDPayout?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func confirmFXPayout(withID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayout?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updatePayout(withID ID: Swift.String, description: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPayout?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrievePayout(withID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayout?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func cancelPayout(withID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayout?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listPayouts(limit: Swift.UInt?, startingAfter afterPayoutID: Swift.String?, endingBefore beforePayoutID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDPayout]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createSender(country: RapydSDK.RPDCountry, currency: RapydSDK.RPDCurrency, entityType: RapydSDK.RPDEntityHolderType, senderRequiredFields: [RapydSDK.RPDPayoutRequiredField]?, firstName: Swift.String?, lastName: Swift.String?, companyName: Swift.String?, identifierType: Swift.String?, identifierValue: Swift.String?, completionBlock: @escaping (RapydSDK.RPDPayoutTransferPartaker?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveSender(forID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayoutTransferPartaker?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteSender(forID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createBeneficiary(category: RapydSDK.RPDPayoutMethodTypeCategoryType, country: RapydSDK.RPDCountry, currency: RapydSDK.RPDCurrency, entityType: RapydSDK.RPDEntityHolderType, firstName: Swift.String?, lastName: Swift.String?, beneficiaryRequiredFields: [RapydSDK.RPDPayoutRequiredField]?, merchantReferenceID: Swift.String?, defaultPayoutMethodType: Swift.String?, companyName: Swift.String?, identifierType: Swift.String?, identifierValue: Swift.String?, completionBlock: @escaping (RapydSDK.RPDPayoutTransferBeneficiaryPartaker?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveBeneficiary(forID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayoutTransferBeneficiaryPartaker?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func validateBeneficiary(payoutMethodType: Swift.String, amount: Foundation.Decimal, country: RapydSDK.RPDCountry, currency: RapydSDK.RPDCurrency, entityType: RapydSDK.RPDEntityHolderType, beneficiary: [RapydSDK.RPDPayoutRequiredField]?, beneficiaryID: Swift.String?, senderCountry: RapydSDK.RPDCountry, senderCurrency: RapydSDK.RPDCurrency, senderEntityType: RapydSDK.RPDEntityHolderType, completionBlock: @escaping (RapydSDK.RPDPayoutValidateBeneficiaryResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteBeneficiary(forID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDAddress : RapydSDK.RPDEntity, Swift.Codable {
  public var name: Swift.String? {
    get
    set
  }
  public var line1: Swift.String? {
    get
    set
  }
  public var line2: Swift.String? {
    get
    set
  }
  public var line3: Swift.String? {
    get
    set
  }
  public var city: Swift.String? {
    get
    set
  }
  public var district: Swift.String? {
    get
    set
  }
  public var canton: Swift.String? {
    get
    set
  }
  public var state: Swift.String? {
    get
    set
  }
  public var country: RapydSDK.RPDCountry? {
    get
    set
  }
  public var zipCode: Swift.String? {
    get
    set
  }
  public var phoneNumber: Swift.String? {
    get
    set
  }
  public var metadata: [Swift.String : Any]? {
    get
    set
  }
  public var ID: Swift.String? {
    get
    set
  }
  public var createdAt: Foundation.Date? {
    get
  }
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum RPDPayoutStatus : Swift.String {
  case created
  case pending
  case completed
  case error
  case canceled
  case confirmation
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDPayout {
  public var ID: Swift.String {
    get
  }
  public var status: RapydSDK.RPDPayoutStatus? {
    get
  }
  public var category: RapydSDK.RPDPayoutMethodTypeCategoryType? {
    get
  }
  public var payoutMethodType: Swift.String? {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var conversionRate: Foundation.Decimal? {
    get
  }
  public var payoutCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var beneficiary: RapydSDK.RPDPayoutTransferPartaker? {
    get
  }
  public var beneficiaryCountry: RapydSDK.RPDCountry? {
    get
  }
  public var sender: RapydSDK.RPDPayoutTransferPartaker? {
    get
  }
  public var senderCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var senderCountry: RapydSDK.RPDCountry? {
    get
  }
  public var eWallets: [RapydSDK.RPDPayServiceProviderEWallet]? {
    get
  }
  public var instruction: RapydSDK.RPDInstruction? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var instructionsValue: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDUsersManager : RapydSDK.RPDSkillsPackage {
  @available(*, deprecated, message: "Use createUser(phoneNumber:) instead")
  @discardableResult
  public func createUser(_ user: RapydSDK.RPDUser, completionBlock: @escaping (RapydSDK.RPDUser?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func createUser(phoneNumber: Swift.String, eWalletType: RapydSDK.RPDWalletType?, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, eWalletReferenceID: Swift.String? = nil, contact: RapydSDK.RPDEWalletContactRequestBuilder? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDUser?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func attachUser(_ user: RapydSDK.RPDUser, completionBlock: @escaping (RapydSDK.RPDUser?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  public func detachUser()
  @discardableResult
  public func reloadUserData(completionBlock: @escaping (RapydSDK.RPDUser?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use updateUser(firstName:) instead")
  @discardableResult
  public func updateUser(_ user: RapydSDK.RPDUser, completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateUser(firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, eWalletReferenceID: Swift.String? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDUser?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func disableUser(completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func enableUser(completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteUser(completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDWalletContactBusinessEntityType : Swift.String {
  case soleProprietorship
  case partnership
  case company
  case government
  case charity
  case NPO
  case association
  case trust
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDWalletContactBusinessDetails : Swift.Codable {
  public var ID: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var industryCategory: Swift.String? {
    get
  }
  public var industrySubCategory: Swift.String? {
    get
  }
  public var registrationNumber: Swift.String? {
    get
  }
  public var entityType: RapydSDK.RPDWalletContactBusinessEntityType? {
    get
  }
  public var address: RapydSDK.RPDAddress? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDRefundcodeManager : RapydSDK.RPDFundsManager {
  @objc deinit
  @objc override dynamic public init()
}
public class RPDSubscriptionItem : RapydSDK.RPDJSONFailableInitializable {
  public var ID: Swift.String {
    get
  }
  public var subscriptionID: Swift.String? {
    get
  }
  public var quantity: Swift.UInt? {
    get
  }
  public var plan: RapydSDK.RPDPlan? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  required public init?(JSON: [Swift.String : Any])
  @objc deinit
}
public enum RPDPayServiceProviderStatus : Swift.String {
  case created
  case completed
  case inProgress
  case canceled
  case pending
  case rejected
  case error
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDPayServiceProviderResponse {
  public var type: Swift.String
  public var ID: Swift.String
  public var eWalletID: Swift.String
  public var currency: RapydSDK.RPDCurrency
  public var amount: Foundation.Decimal
  public var status: RapydSDK.RPDPayServiceProviderStatus
  public var createdAt: Foundation.Date
  public var paidAt: Foundation.Date
  public var eWallets: [RapydSDK.RPDPayServiceProviderEWallet]?
  public var metadata: [Swift.String : Any]?
  public var payDescription: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDTransaction : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var amount: Swift.Double? {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var status: Swift.String {
    get
  }
  public var eWalletID: Swift.String {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use RPDPaymentManager class instead")
public class RPDRefundManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createRefund(forPaymentID ID: Swift.String, amount: Foundation.Decimal?, merchantReferenceID: Swift.String?, reason: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateRefund(forID ID: Swift.String, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func completeRefund(byID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveRefund(byID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listRefunds(limit: Swift.UInt?, startingAfter afterRefundID: Swift.String?, endingBefore beforeRefundID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDRefund]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listRefundsByPayment(_ ID: Swift.String, completionBlock: @escaping ([RapydSDK.RPDRefund]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class RPDPaymentTransferIntoEWallet {
  public var amount: Foundation.Decimal {
    get
  }
  public var eWalletID: Swift.String {
    get
  }
  public var percentage: Foundation.Decimal {
    get
  }
  public var releasedAmount: Foundation.Decimal? {
    get
  }
  public var refundedAmount: Foundation.Decimal? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDPayoutTransferBeneficiaryPartaker : RapydSDK.RPDPayoutTransferPartaker {
  public var firstName: Swift.String? {
    get
  }
  public var lastName: Swift.String? {
    get
  }
  public var merchantReferenceID: Swift.String? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutValidateBeneficiary {
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  public var country: RapydSDK.RPDCountry? {
    get
  }
  public var entityHolderType: RapydSDK.RPDEntityHolderType? {
    get
  }
  public var extraFields: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDPaymentMethodRequiredField : ObjectiveC.NSObject {
  public var name: Swift.String! {
    get
  }
  public var type: Swift.String! {
    get
  }
  public var regex: Swift.String! {
    get
  }
  public var instructions: Swift.String! {
    get
  }
  public var extraDescription: Swift.String! {
    get
  }
  public var isRequired: Swift.Bool {
    get
  }
  public var value: Any?
  @objc deinit
  @objc override dynamic public init()
}
public typealias RPDSubscriptionItemForCreation = (planID: Swift.String, quantity: Swift.UInt?)
@objc @_inheritsConvenienceInitializers public class RPDSubscriptionManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createSubscription(customerID: Swift.String, billing: RapydSDK.RPDSubscriptionBilling, subscriptionItems: [RapydSDK.RPDSubscriptionItemForCreation], billingCycleAnchor: RapydSDK.RPDSubscriptionBillingCycleAnchor?, paymentMethodID: Swift.String?, paymentMethod: RapydSDK.RPDSubscriptionPaymentMethod?, paymentFields: [Swift.String : Any]?, cancelAtBillingPeriodEnd: Swift.Bool?, couponID: Swift.String?, daysUntilDue: Swift.UInt?, taxPercent: Foundation.Decimal?, trialEnd: RapydSDK.RPDSubscriptionTrialEnd?, trialPeriodDays: Swift.UInt?, trialFromPlan: Swift.Bool?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSubscription?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateSubscription(_ ID: Swift.String, billing: RapydSDK.RPDSubscriptionBilling?, billingCycleAnchor: RapydSDK.RPDSubscriptionBillingCycleAnchor?, paymentFields: [Swift.String : Any]?, cancelAtBillingPeriodEnd: Swift.Bool?, couponID: Swift.String?, daysUntilDue: Swift.UInt?, taxPercent: Foundation.Decimal?, trialEnd: RapydSDK.RPDSubscriptionTrialEnd?, trialPeriodDays: Swift.UInt?, trialFromPlan: Swift.Bool?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSubscription?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveSubscription(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDSubscription?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listSubscriptions(customerID: Swift.String?, billing: RapydSDK.RPDSubscriptionBilling?, status: RapydSDK.RPDSubscriptionStatus?, limit: Swift.UInt?, startingAfter afterSubscriptionID: Swift.String?, endingBefore beforeSubscriptionID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDSubscription]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func cancelSubscription(_ ID: Swift.String, cancelAtBillingPeriodEnd: Swift.Bool?, completionBlock: @escaping (RapydSDK.RPDSubscription?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteDiscountFromSubscription(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDRefundFailureReason : Swift.String {
  case lostOrStolenCard
  case expiredOrCanceledCard
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum RPDRefundStatus : Swift.String {
  case completed
  case rejected
  case pending
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class RPDRefund : RapydSDK.RPDJSONFailableInitializable {
  public var ID: Swift.String {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var paymentID: Swift.String? {
    get
  }
  public var reason: Swift.String? {
    get
  }
  public var receiptNumber: Swift.Int? {
    get
  }
  public var failureReason: RapydSDK.RPDRefundFailureReason? {
    get
  }
  public var isProportionalRefund: Swift.Bool? {
    get
  }
  public var merchantReferenceID: Swift.String? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  public var paymentMethodType: Swift.String? {
    get
  }
  public var status: RapydSDK.RPDRefundStatus? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
  public var paymentCreatedAt: Foundation.Date? {
    get
  }
  public var eWallets: [RapydSDK.RPDRefundEWallet]? {
    get
  }
  required public init?(JSON: [Swift.String : Any])
  @objc deinit
}
public class RPDEWalletContactRequestBuilder {
  public var contactType: RapydSDK.RPDEWalletContactType {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var email: Swift.String {
    get
  }
  public var phoneNumber: Swift.String {
    get
  }
  public var businessDetails: RapydSDK.RPDWalletContactBusinessDetailsRequestBuilder? {
    get
  }
  public var dateOfBirth: Foundation.Date? {
    get
  }
  public var middleName: Swift.String? {
    get
  }
  public var secondLastName: Swift.String? {
    get
  }
  public var identificationNumber: Swift.String? {
    get
  }
  public var gender: RapydSDK.RPDGenderType? {
    get
  }
  public var residence: RapydSDK.RPDResidenceType? {
    get
  }
  public var maritalStatus: RapydSDK.RPDMaritalStatusType? {
    get
  }
  public var identificationType: Swift.String? {
    get
  }
  public var address: RapydSDK.RPDAddress? {
    get
  }
  public var country: RapydSDK.RPDCountry? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public init(contactType: RapydSDK.RPDEWalletContactType, firstName: Swift.String, lastName: Swift.String, email: Swift.String, phoneNumber: Swift.String, businessDetails: RapydSDK.RPDWalletContactBusinessDetailsRequestBuilder? = nil, dateOfBirth: Foundation.Date? = nil, middleName: Swift.String? = nil, secondLastName: Swift.String? = nil, identificationNumber: Swift.String? = nil, gender: RapydSDK.RPDGenderType? = nil, residence: RapydSDK.RPDResidenceType? = nil, maritalStatus: RapydSDK.RPDMaritalStatusType? = nil, identificationType: Swift.String? = nil, address: RapydSDK.RPDAddress? = nil, country: RapydSDK.RPDCountry? = nil, metadata: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDCardIssuing {
  public var ID: Swift.String
  public var cardID: Swift.String
  public var BIN: Swift.String?
  public var subBIN: Swift.String?
  public var publicDetails: [Swift.String : Any]?
  public var eWalletContact: RapydSDK.RPDEWalletContact?
  public var createdAt: Foundation.Date?
  public var activatedAt: Foundation.Date?
  public var assignedAt: Foundation.Date?
  public var country: RapydSDK.RPDCountry?
  public var status: RapydSDK.RPDCardIssueStatus?
  public var cvv: Swift.String?
  public var expirationMonth: Swift.String?
  public var expirationYear: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDIndentityDetails : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var referenceId: Swift.String {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use RPDAccountsManager class instead")
public class RPDPurchaseManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func requestQuote(quoteRequest: RapydSDK.RPDQuoteRequest, completionBlock: @escaping (RapydSDK.RPDQuote?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func buy(withQuote quote: RapydSDK.RPDQuote, completionBlock: @escaping (RapydSDK.RPDPurchaseSummary?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDServiceProvidersManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func listServiceProviders(country: RapydSDK.RPDCountry?, currency: RapydSDK.RPDCurrency?, catalogType: Swift.String?, catalogSubtype: Swift.String?, limit: Swift.Int?, completionBlock: @escaping ([RapydSDK.RPDServiceProvider]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveServiceProvider(for type: Swift.String, completionBlock: @escaping (RapydSDK.RPDServiceProvider?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func validateServiceProvider(type: Swift.String, requiredFields: [RapydSDK.RPDServiceProviderRequiredField], completionBlock: @escaping (RapydSDK.RPDValidateServiceProviderResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func payServiceProvider(type: Swift.String, requiredFields: [RapydSDK.RPDServiceProviderRequiredField], amount: Foundation.Decimal, currency: RapydSDK.RPDCurrency, eWallet: Swift.String, description: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPayServiceProviderResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func checkConsumerAccountBalance(type: Swift.String, requiredFields: [RapydSDK.RPDServiceProviderRequiredField], completionBlock: @escaping (RapydSDK.RPDCheckConsumerAccountBalanceServiceProviderResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDOtpManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func resetOTPAccess(completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func syncOTP(completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  public func generateOTPCode() -> RapydSDK.RPDOTPCode
  @objc deinit
  @objc override dynamic public init()
}
public class RPDWalletContactBusinessDetailsRequestBuilder {
  public var name: Swift.String? {
    get
  }
  public var industryCategory: Swift.String? {
    get
  }
  public var industrySubCategory: Swift.String? {
    get
  }
  public var registrationNumber: Swift.String? {
    get
  }
  public var entityType: RapydSDK.RPDWalletContactBusinessEntityType? {
    get
  }
  public var address: RapydSDK.RPDAddress? {
    get
  }
  public init(name: Swift.String? = nil, registrationNumber: Swift.String? = nil, industryCategory: Swift.String? = nil, industrySubCategory: Swift.String? = nil, entityType: RapydSDK.RPDWalletContactBusinessEntityType? = nil, address: RapydSDK.RPDAddress? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDIdentity : RapydSDK.RPDEntity {
  public var referenceId: Swift.String? {
    get
    set
  }
  public var country: RapydSDK.RPDCountry? {
    get
    set
  }
  public var documentType: Swift.String? {
    get
    set
  }
  public var documentFrontImage: UIKit.UIImage? {
    get
    set
  }
  public var documentBackImage: UIKit.UIImage? {
    get
    set
  }
  public var selfieImage: UIKit.UIImage? {
    get
    set
  }
  public var sendCallback: Swift.Bool {
    get
    set
  }
  public var firstName: Swift.String? {
    get
    set
  }
  public var lastName: Swift.String? {
    get
    set
  }
  public var state: Swift.String? {
    get
    set
  }
  public var expirationDate: Foundation.Date? {
    get
    set
  }
  public var idNumber: Swift.String? {
    get
    set
  }
  public var dateOfBirth: Foundation.Date? {
    get
    set
  }
  public var personalNumber: Swift.String? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDUsageRecordAction {
  case increment
  case set
  public static func == (a: RapydSDK.RPDUsageRecordAction, b: RapydSDK.RPDUsageRecordAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class RPDUsageRecordManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createUsageRecord(subscriptionItemID: Swift.String, quantity: Swift.UInt, time: Foundation.Date, action: RapydSDK.RPDUsageRecordAction?, completionBlock: @escaping (RapydSDK.RPDUsageRecord?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listUsageRecords(subscriptionItemID: Swift.String, limit: Swift.UInt?, startingAfter afterTime: Foundation.Date?, endingBefore beforeTime: Foundation.Date?, completionBlock: @escaping ([RapydSDK.RPDUsageRecord]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public typealias RPDMoreDataSaveable = RapydSDK.RPDJSONFailableInitializable & Swift.Codable
@_hasMissingDesignatedInitializers public class RPDSaveableMoreData<D> : RapydSDK.RPDMoreData<D>, Swift.Codable where D : RapydSDK.RPDJSONFailableInitializable, D : Swift.Decodable, D : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDQuote {
  public var ID: Swift.String {
    get
  }
  public var sellCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var buyCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var price: Foundation.Decimal? {
    get
  }
  public var rate: Foundation.Decimal? {
    get
  }
  public var expiredAt: Foundation.Date? {
    get
  }
  public var expiredInMs: Swift.UInt? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDCodeDetails : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var type: Swift.Int {
    get
  }
  public var code: Swift.String {
    get
  }
  public var status: Swift.String {
    get
  }
  public var amount: Swift.Int {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var isMergedPaycode: Swift.Bool {
    get
  }
  public var expiredAt: Foundation.Date? {
    get
  }
  public var phoneNumber: Swift.String {
    get
  }
  public var posId: Swift.String {
    get
  }
  public var usedAt: Foundation.Date? {
    get
  }
  public var createdAt: Foundation.Date {
    get
  }
  public var cart: [[Swift.String : Any]] {
    get
  }
  public var desc: Swift.String {
    get
  }
  public var refunds: [RapydSDK.RPDCodeDetails]? {
    get
  }
  public var outcome: Swift.String? {
    get
  }
  public var paid: Swift.Bool {
    get
  }
  public var instructions: [Swift.String : Any]? {
    get
  }
  public var textualCodes: [Swift.String : Any]? {
    get
  }
  public var visualCodes: [Swift.String : Any]? {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDSubscriptionItemManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createSubscriptionItem(subscriptionID: Swift.String, planID: Swift.String, quantity: Swift.UInt?, isProrate: Swift.Bool?, prorateDate: Foundation.Date?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSubscriptionItem?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateSubscriptionItem(_ ID: Swift.String, quantity: Swift.UInt?, isProrate: Swift.Bool?, prorateDate: Foundation.Date?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSubscriptionItem?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveSubscriptionItem(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDSubscriptionItem?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listSubscriptionItems(subscriptionID: Swift.String, limit: Swift.UInt?, startingAfter afterSubscriptionItemID: Swift.String?, endingBefore beforeSubscriptionItemID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDSubscriptionItem]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteSubscriptionItem(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class RPDDiscount {
  public var ID: Swift.String {
    get
  }
  public var coupon: RapydSDK.RPDCoupon {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDEntity : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public func dictionaryData() -> [Swift.String : Any]?
  @objc deinit
}
public struct RPDAmountRangePerCurrency {
  public var minimumAmount: Foundation.Decimal? {
    get
  }
  public var maximumAmount: Foundation.Decimal? {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
}
public enum CurrencyUsage : Swift.String {
  case buy
  case sell
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDCurrency : RapydSDK.RPDEntity {
  public static func currency(with currencyCode: Swift.String) -> RapydSDK.RPDCurrency
  public var code: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var symbol: Swift.String? {
    get
  }
  public var symbolUrl: Swift.String? {
    get
  }
  public var usage: [RapydSDK.CurrencyUsage]? {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDValidateServiceProviderResponseStatus {
  case exist
  case notExist
  public static func == (a: RapydSDK.RPDValidateServiceProviderResponseStatus, b: RapydSDK.RPDValidateServiceProviderResponseStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDValidateServiceProviderResponse {
  public var type: Swift.String
  public var status: RapydSDK.RPDValidateServiceProviderResponseStatus
  public var reason: Swift.String?
  @objc deinit
}
public enum RPDBankAccountNumberIssuingStatus : Swift.String {
  case active
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDBankAccountNumberIssuing {
  public var ID: Swift.String
  public var bankAccount: [Swift.String : Any]?
  public var status: RapydSDK.RPDBankAccountNumberIssuingStatus?
  public var currency: RapydSDK.RPDCurrency?
  public var description: Swift.String?
  public var metadata: [Swift.String : Any]?
  public var merchantReferenceID: Swift.String?
  public var eWallet: Swift.String?
  public var transactions: [RapydSDK.RPDBankAccountTransaction]?
  @objc deinit
}
public enum RPDEWalletContactType : Swift.String {
  case personal
  case business
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RPDGenderType : Swift.String {
  case male
  case other
  case female
  case notApplicable
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RPDResidenceType : Swift.String {
  case own
  case owner
  case lease
  case monthToMonth
  case liveWithFamily
  case housingProject
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RPDMaritalStatusType : Swift.String {
  case single
  case married
  case widowed
  case divorced
  case cohabiting
  case notApplicable
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RPDWalletContactVerificationStatus : Swift.String {
  case notVerified
  case KYCd
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RPDEWalletContactsManager : RapydSDK.RPDSkillsPackage {
  @available(*, deprecated, renamed: "add")
  @discardableResult
  public func create(contactWithType type: RapydSDK.RPDEWalletContactType, phoneNumber: Swift.String, firstName: Swift.String, lastName: Swift.String, email: Swift.String, middleName: Swift.String? = nil, secondLastName: Swift.String? = nil, dateOfBirth: Foundation.Date? = nil, country: RapydSDK.RPDCountry? = nil, gender: RapydSDK.RPDGenderType? = nil, maritalStatus: RapydSDK.RPDMaritalStatusType? = nil, residence: RapydSDK.RPDResidenceType? = nil, address: RapydSDK.RPDAddress? = nil, identificationType: Swift.String? = nil, identificationNumber: Swift.String? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDEWalletContact?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func add(contactWithType type: RapydSDK.RPDEWalletContactType, phoneNumber: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, middleName: Swift.String? = nil, secondLastName: Swift.String? = nil, dateOfBirth: Foundation.Date? = nil, country: RapydSDK.RPDCountry? = nil, gender: RapydSDK.RPDGenderType? = nil, maritalStatus: RapydSDK.RPDMaritalStatusType? = nil, residence: RapydSDK.RPDResidenceType? = nil, address: RapydSDK.RPDAddress? = nil, identificationType: Swift.String? = nil, identificationNumber: Swift.String? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDEWalletContact?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func update(contactWithID ID: Swift.String, contactType: RapydSDK.RPDEWalletContactType? = nil, businessDetails: RapydSDK.RPDWalletContactBusinessDetailsRequestBuilder? = nil, phoneNumber: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, email: Swift.String? = nil, middleName: Swift.String? = nil, secondLastName: Swift.String? = nil, dateOfBirth: Foundation.Date? = nil, country: RapydSDK.RPDCountry? = nil, gender: RapydSDK.RPDGenderType? = nil, maritalStatus: RapydSDK.RPDMaritalStatusType? = nil, residence: RapydSDK.RPDResidenceType? = nil, address: RapydSDK.RPDAddress? = nil, identificationType: Swift.String? = nil, identificationNumber: Swift.String? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDEWalletContact?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listContacts(completionBlock: @escaping ([RapydSDK.RPDEWalletContact]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieve(contactWithID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDEWalletContact?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func delete(contactWithID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDPaymentMethodRequiredFields : RapydSDK.RPDEntity {
  public var type: Swift.String? {
    get
  }
  public var fields: [RapydSDK.RPDPaymentMethodRequiredField] {
    get
  }
  public var paymentMethodOptions: [RapydSDK.RPDPaymentMethodRequiredField] {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public class RPDEWalletContact : RapydSDK.RPDMoreDataSaveable {
  public var contactType: RapydSDK.RPDEWalletContactType {
    get
  }
  public var ID: Swift.String {
    get
  }
  public var firstName: Swift.String? {
    get
  }
  public var lastName: Swift.String? {
    get
  }
  public var email: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var eWalletID: Swift.String? {
    get
  }
  public var dateOfBirth: Foundation.Date? {
    get
  }
  public var middleName: Swift.String? {
    get
  }
  public var secondLastName: Swift.String? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var identificationNumber: Swift.String? {
    get
  }
  public var nationality: Swift.String? {
    get
  }
  public var gender: RapydSDK.RPDGenderType? {
    get
  }
  public var residence: RapydSDK.RPDResidenceType? {
    get
  }
  public var maritalStatus: RapydSDK.RPDMaritalStatusType? {
    get
  }
  public var identificationType: Swift.String? {
    get
  }
  public var address: RapydSDK.RPDAddress? {
    get
  }
  public var country: RapydSDK.RPDCountry? {
    get
  }
  public var complianceProfile: Swift.UInt? {
    get
  }
  public var verificationStatus: RapydSDK.RPDWalletContactVerificationStatus? {
    get
  }
  public var businessDetails: RapydSDK.RPDWalletContactBusinessDetails? {
    get
  }
  public var politicallyExposedPerson: Swift.UInt? {
    get
  }
  required public init?(JSON: [Swift.String : Any])
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDRefundEWallet {
  public var ID: Swift.String {
    get
  }
  public var amount: Foundation.Decimal {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPurchaseSummary {
  public var ID: Swift.String {
    get
  }
  public var quoteID: Swift.String? {
    get
  }
  public var sellCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var buyCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var price: Foundation.Decimal? {
    get
  }
  public var rate: Foundation.Decimal? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var forwardDate: Foundation.Date? {
    get
  }
  public var status: RapydSDK.RPDPurchaseCurrencyStatus? {
    get
  }
  public var fixedSide: RapydSDK.RPDCurrencyFixedSide? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public enum RPDEscrowStatus {
  case pending
  case onHold
  case canceled
  case released
  public static func == (a: RapydSDK.RPDEscrowStatus, b: RapydSDK.RPDEscrowStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDEscrow {
  public var ID: Swift.String {
    get
  }
  public var paymentID: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
  public var lastPaymentCompletionAt: Foundation.Date? {
    get
  }
  public var totalAmountReleased: Foundation.Decimal? {
    get
  }
  public var amountOnHold: Foundation.Decimal? {
    get
  }
  public var escrowReleaseDays: Swift.UInt? {
    get
  }
  public var status: RapydSDK.RPDEscrowStatus? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDBankAccountTokenData {
  public var ID: Swift.String
  public var accountHolderName: Swift.String?
  public var accountHolderType: Swift.String?
  public var lastFourDigits: Swift.String?
  public var bankName: Swift.String?
  public var routingNumber: Swift.String?
  public var isDeleted: Swift.Bool?
  public var country: RapydSDK.RPDCountry?
  public var currency: RapydSDK.RPDCurrency?
  public var status: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var vaultType: Swift.String?
  public var type: Swift.String?
  public var metadata: [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDPIITokenResponse : RapydSDK.RPDTokenResponse {
  public var tokenData: RapydSDK.RPDPIITokenData?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDPaymentRequest : RapydSDK.RPDEntity {
  public var amount: Swift.Double {
    get
    set
  }
  public var metadata: [Swift.String : Any]? {
    get
    set
  }
  public var paymentMethodOptions: [RapydSDK.RPDPaymentMethodRequiredField]? {
    get
    set
  }
  public var currency: RapydSDK.RPDCurrency {
    get
    set
  }
  public var paymentMethodToken: Swift.String? {
    get
    set
  }
  public var expiration: Foundation.Date? {
    get
    set
  }
  public var paymentMethod: RapydSDK.RPDPaymentMethod? {
    get
    set
  }
  public var address: RapydSDK.RPDAddress? {
    get
    set
  }
  public func addEWallet(_ eWallet: RapydSDK.RPDEWallet)
  public func removeEWallet(_ eWallet: RapydSDK.RPDEWallet)
  public func removeAllEWallets()
  public var completePaymentURL: Swift.String? {
    get
    set
  }
  public var errorPaymentURL: Swift.String? {
    get
    set
  }
  public var merchantReferenceID: Swift.String? {
    get
    set
  }
  public var paymentDescription: Swift.String? {
    get
    set
  }
  public var capture: Swift.Bool? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDCardIssueStatus : Swift.String {
  case active
  case inactive
  case cancelled
  case blocked
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class RPDCardIssuingManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func issue(cardWithEWalletContactID ID: Swift.String, country: RapydSDK.RPDCountry, expirationMonth: Swift.UInt?, expirationYear: Swift.UInt?, completionBlock: @escaping (RapydSDK.RPDIssueCard?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func update(issuedCardNumber cardNumber: Swift.String, toBlocked: Swift.Bool, completionBlock: @escaping (RapydSDK.RPDCardIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func activate(issuedCardNumber cardNumber: Swift.String, completionBlock: @escaping (RapydSDK.RPDCardIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func personalize(issuedCardNumber cardNumber: Swift.String, forEWalletContactID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDCardIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func setPINCode(forIssuedCardNumber cardNumber: Swift.String, pin: Swift.String, completionBlock: @escaping (RapydSDK.RPDCardIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveIssuedCard(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDIssueCard?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listIssuedCards(status: RapydSDK.RPDCardIssueStatus?, completionBlock: @escaping ([RapydSDK.RPDIssueCard]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum FixedSide : Swift.String {
  case buy
  case sell
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class RPDQuoteRequest : RapydSDK.RPDEntity {
  public var amount: Swift.Double? {
    get
    set
  }
  public var buyCurrency: RapydSDK.RPDCurrency? {
    get
    set
  }
  public var sellCurrency: RapydSDK.RPDCurrency? {
    get
    set
  }
  public var forwardDate: Foundation.Date? {
    get
    set
  }
  public func setFixedSide(_ side: RapydSDK.FixedSide)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RPDBankAccountRegister : RapydSDK.RPDEntity {
  public var bankCountry: RapydSDK.RPDCountry! {
    get
  }
  public var userCountry: RapydSDK.RPDCountry! {
    get
  }
  public var accountCurrency: RapydSDK.RPDCurrency! {
    get
  }
  public var paymentType: Swift.String? {
    get
  }
  public var beneficiaryEntityType: Swift.String? {
    get
  }
  public var requiredFields: [RapydSDK.RPDRequiredField] {
    get
  }
  public var accountHolderName: Swift.String?
  public var bankAlias: Swift.String?
  public func replaceAllRequiredFields(_ array: [RapydSDK.RPDRequiredField])
  public func set(value: Swift.String, forIndex: Swift.Int)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDPaymentMethodManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func fetchPaymentMethod(byCountry country: RapydSDK.RPDCountry, andCurrency currency: RapydSDK.RPDCurrency? = nil, completionBlock: @escaping ([RapydSDK.RPDSupportedPaymentMethodType]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchPaymentMethodRequiredFields(type: Swift.String, completionBlock: @escaping (RapydSDK.RPDPaymentMethodRequiredFields?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use RPDCustomerManager class instead")
  @discardableResult
  public func addPaymentMethod(type: Swift.String, customerID: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, token: Swift.String?, address: RapydSDK.RPDAddress?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPaymentMethodData?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use RPDCustomerManager class instead")
  @discardableResult
  public func updatePaymentMethod(withID ID: Swift.String, customerID: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, address: RapydSDK.RPDAddress?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPaymentMethodData?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  public static func save(paymentMethodRequiredFields: RapydSDK.RPDPaymentMethodRequiredFields, for key: Swift.String)
  public static func loadPaymentMethodRequiredFields(for key: Swift.String) -> RapydSDK.RPDPaymentMethodRequiredFields?
  public static func deletePaymentMethodRequiredFields(for key: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDPaymentFeeCalcType {
  case net
  case gross
  public static func == (a: RapydSDK.RPDPaymentFeeCalcType, b: RapydSDK.RPDPaymentFeeCalcType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPaymentFeeType {
  case percentage
  case absolute
  public static func == (a: RapydSDK.RPDPaymentFeeType, b: RapydSDK.RPDPaymentFeeType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDPaymentFee {
  public var calcType: RapydSDK.RPDPaymentFeeCalcType {
    get
  }
  public var value: Foundation.Decimal {
    get
  }
  public init(calcType: RapydSDK.RPDPaymentFeeCalcType, value: Foundation.Decimal)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPaymentFeeRelativeChange : RapydSDK.RPDPaymentFee {
  public var feeType: RapydSDK.RPDPaymentFeeType {
    get
  }
  public init(feeType: RapydSDK.RPDPaymentFeeType, calcType: RapydSDK.RPDPaymentFeeCalcType, value: Foundation.Decimal)
  @objc deinit
  override public init(calcType: RapydSDK.RPDPaymentFeeCalcType, value: Foundation.Decimal)
}
public struct RPDPaymentFees {
  public var transactionFee: RapydSDK.RPDPaymentFeeRelativeChange? {
    get
  }
  public var fxFee: RapydSDK.RPDPaymentFee? {
    get
  }
  public var grossFees: Foundation.Decimal? {
    get
  }
  public var netFees: Foundation.Decimal? {
    get
  }
  public init?(transactionFee: RapydSDK.RPDPaymentFeeRelativeChange?, fxFee: RapydSDK.RPDPaymentFee?)
}
@objc @_inheritsConvenienceInitializers public class RPDPlanManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createPlan(productID: Swift.String, currency: RapydSDK.RPDCurrency, interval: RapydSDK.RPDPlanInterval, intervalCount: Swift.UInt?, ID: Swift.String?, nickname: Swift.String?, trialPeriodDays: Swift.UInt?, billingScheme: RapydSDK.RPDPlanBillingScheme?, amount: Foundation.Decimal?, usageType: RapydSDK.RPDPlanUsageType?, aggregateUsage: RapydSDK.RPDPlanAggregateUsage?, transformUsage: RapydSDK.RPDPlanTransformUsage?, tiers: [RapydSDK.RPDPlanTier]?, tiersMode: RapydSDK.RPDPlanTiersMode?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPlan?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updatePlan(_ ID: Swift.String, nickname: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPlan?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrievePlan(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPlan?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listPlans(limit: Swift.UInt?, startingAfter afterPlanID: Swift.String?, endingBefore beforePlanID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDPlan]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deletePlan(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDLocation : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var alias: Swift.String {
    get
  }
  public var coordinate2D: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var addressAlias: Swift.String {
    get
  }
  public var fullName: Swift.String {
    get
  }
  public var addressLine1: Swift.String {
    get
  }
  public var addressLine2: Swift.String {
    get
  }
  public var city: Swift.String {
    get
  }
  public var state: Swift.String {
    get
  }
  public var zipCode: Swift.String {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var country: Swift.String {
    get
  }
  public var type: Swift.Int {
    get
  }
  public var profileURL: Swift.String {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var distance: Swift.Double {
    get
  }
  public var locationType: Swift.String {
    get
  }
  public var locatedIn: Swift.String {
    get
  }
  public var isCluster: Swift.Bool {
    get
  }
  public var clusterSize: Swift.Int {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDCardTokenResponse : RapydSDK.RPDTokenResponse {
  public var tokenData: RapydSDK.RPDCardTokenData?
  public var tokenJSONData: [Swift.String : Any]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDDeleteResponse {
  public var isDeleted: Swift.Bool
  public var ID: Swift.String?
  @objc deinit
}
public enum RPDSubscriptionBilling {
  case payAutomatically
  case sendInvoice
  public static func == (a: RapydSDK.RPDSubscriptionBilling, b: RapydSDK.RPDSubscriptionBilling) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDSubscriptionTrialEnd {
  case now
  case date(Foundation.Date)
}
public enum RPDSubscriptionBillingCycleAnchor {
  case unchanged
  case now
  case date(Foundation.Date)
}
public enum RPDSubscriptionStatus {
  case active
  case canceled
  case trialing
  public static func == (a: RapydSDK.RPDSubscriptionStatus, b: RapydSDK.RPDSubscriptionStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDSubscription {
  public var ID: Swift.String {
    get
  }
  public var billing: RapydSDK.RPDSubscriptionBilling {
    get
  }
  public var billingCycleAnchor: RapydSDK.RPDSubscriptionBillingCycleAnchor? {
    get
  }
  public var subscriptionItems: RapydSDK.RPDMoreData<RapydSDK.RPDSubscriptionItem>? {
    get
  }
  public var canceledAt: Foundation.Date? {
    get
  }
  public var paymentMethodID: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var customerID: Swift.String? {
    get
  }
  public var quantity: Swift.UInt? {
    get
  }
  public var cancelAtBillingPeriodEnd: Swift.Bool? {
    get
  }
  public var status: RapydSDK.RPDSubscriptionStatus? {
    get
  }
  public var daysUntilDue: Swift.UInt? {
    get
  }
  public var currentBillingPeriodCycleStart: Foundation.Date? {
    get
  }
  public var currentBillingPeriodCycleEnd: Foundation.Date? {
    get
  }
  public var endedAt: Foundation.Date? {
    get
  }
  public var taxPercent: Foundation.Decimal? {
    get
  }
  public var trialStart: Foundation.Date? {
    get
  }
  public var trialEnd: RapydSDK.RPDSubscriptionTrialEnd? {
    get
  }
  public var discount: RapydSDK.RPDDiscount? {
    get
  }
  public var paymentFields: [Swift.String : Any]? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
public class RPDSubscriptionPaymentMethod {
  public var type: Swift.String {
    get
  }
  public var requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]? {
    get
  }
  public init(type: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDAccountTransferDetails : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDAccount : RapydSDK.RPDEntity {
  public var id: Swift.String? {
    get
    set
  }
  public var currency: Swift.String? {
    get
    set
  }
  public var alias: Swift.String? {
    get
    set
  }
  public var balance: Swift.Double? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class RPDPaymentMethod : RapydSDK.RPDEntity {
  public var address: RapydSDK.RPDAddress? {
    get
    set
  }
  public var type: Swift.String? {
    get
    set
  }
  public var metadata: [Swift.String : Any]? {
    get
    set
  }
  public var token: Swift.String? {
    get
    set
  }
  @objc override dynamic public init()
  public init(withPaymentMethodFields paymentMethodFields: RapydSDK.RPDPaymentMethodRequiredFields)
  @objc deinit
}
public enum RPDPaymentStatus {
  case active
  case cancelled
  case closed
  case new
  case error
  public static func == (a: RapydSDK.RPDPaymentStatus, b: RapydSDK.RPDPaymentStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPaymentMethodTypeCategory {
  case cash
  case card
  case ewallet
  case bankTransfer
  case bankRedirect
  public static func == (a: RapydSDK.RPDPaymentMethodTypeCategory, b: RapydSDK.RPDPaymentMethodTypeCategory) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDPayment {
  public var ID: Swift.String {
    get
  }
  public var status: RapydSDK.RPDPaymentStatus {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var originalAmount: Foundation.Decimal? {
    get
  }
  public var refundedAmount: Foundation.Decimal? {
    get
  }
  public var merchantRequestedAmount: Foundation.Decimal? {
    get
  }
  public var isPaid: Swift.Bool? {
    get
  }
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  public var merchantRequestedCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var country: RapydSDK.RPDCountry? {
    get
  }
  public var failureMessage: Swift.String? {
    get
  }
  public var failureCode: Swift.String? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var isPartial: Swift.Bool? {
    get
  }
  public var completePaymentURL: Foundation.URL? {
    get
  }
  public var errorPaymentURL: Foundation.URL? {
    get
  }
  public var redirectURL: Foundation.URL? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var paidAt: Foundation.Date? {
    get
  }
  public var expirationAt: Foundation.Date? {
    get
  }
  public var invoice: Swift.String? {
    get
  }
  public var transactionID: Swift.String? {
    get
  }
  public var customerID: Swift.String? {
    get
  }
  public var isRefunded: Swift.Bool? {
    get
  }
  public var isCaptured: Swift.Bool? {
    get
  }
  public var statementDescriptor: Swift.String? {
    get
  }
  public var merchantReferenceID: Swift.String? {
    get
  }
  public var address: RapydSDK.RPDAddress? {
    get
  }
  public var textualCodes: [Swift.String : Any]? {
    get
  }
  public var receiptEmail: Swift.String? {
    get
  }
  public var receiptNumber: Swift.String? {
    get
  }
  public var orderID: Swift.String? {
    get
  }
  public var paymentMethodType: Swift.String? {
    get
  }
  public var paymentMethodID: Swift.String? {
    get
  }
  public var instructions: [RapydSDK.RPDInstruction]? {
    get
  }
  public var fxRate: Foundation.Decimal? {
    get
  }
  public var eWalletID: Swift.String? {
    get
  }
  public var eWallets: [RapydSDK.RPDPaymentTransferIntoEWallet]? {
    get
  }
  public var flowType: RapydSDK.RPDPaymentMethodTypeCategory? {
    get
  }
  public var paymentMethodTypeCategory: RapydSDK.RPDPaymentMethodTypeCategory? {
    get
  }
  public var visualCodes: [Swift.String : Any]? {
    get
  }
  public var refunds: RapydSDK.RPDMoreData<RapydSDK.RPDRefund>? {
    get
  }
  public var paymentMethodOptions: [Swift.String : Any]? {
    get
  }
  public var outcome: RapydSDK.RPDPaymentOutcome? {
    get
  }
  public var paymentFees: RapydSDK.RPDPaymentFees? {
    get
  }
  public var escrow: RapydSDK.RPDEscrow? {
    get
  }
  public var dispute: Any? {
    get
  }
  @objc deinit
}
public enum RPDCurrencyFixedSide : Swift.String {
  case buy
  case sell
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum RPDPurchaseCurrencyStatus {
  case pending
  case closed
  public static func == (a: RapydSDK.RPDPurchaseCurrencyStatus, b: RapydSDK.RPDPurchaseCurrencyStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class RPDAccountsManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func userAccounts(completionBlock: @escaping ([RapydSDK.RPDAccount]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func addFunds(currency: RapydSDK.RPDCurrency, amount: Swift.String, completionBlock: @escaping (RapydSDK.RPDFundsDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetch(fundsDetailsWithId id: Swift.String, completionBlock: @escaping (RapydSDK.RPDFundsDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetch(removedFundsDetailsWithId id: Swift.String, completionBlock: @escaping (RapydSDK.RPDFundsDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func removeFunds(currency: RapydSDK.RPDCurrency, amount: Swift.String, completionBlock: @escaping (RapydSDK.RPDFundsDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func getQuote(amount: Foundation.Decimal, buyCurrency: RapydSDK.RPDCurrency, sellCurrency: RapydSDK.RPDCurrency, forwardDate: Foundation.Date? = nil, fixedSide: RapydSDK.RPDCurrencyFixedSide? = .buy, completionBlock: @escaping (RapydSDK.RPDQuote?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use getQuote function")
  @discardableResult
  public func requestQuote(quoteRequest: RapydSDK.RPDQuoteRequest, completionBlock: @escaping (RapydSDK.RPDQuote?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func purchaseCurrency(for quoteID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPurchaseSummary?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use purchaseCurrency function")
  @discardableResult
  public func buy(withQuote quote: RapydSDK.RPDQuote, completionBlock: @escaping (RapydSDK.RPDPurchaseSummary?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transfer(toUserWithTransferRequest transferReq: RapydSDK.RPDTransferRequest, completionBlock: @escaping (RapydSDK.RPDUserTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transfer(toAccountWithTransferRequest transferReq: RapydSDK.RPDTransferRequest, completionBlock: @escaping (RapydSDK.RPDAccountTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transfer(replyWithTransferId id: Swift.String, status: RapydSDK.TransferReplyType, completionBlock: @escaping (RapydSDK.RPDUserTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RPDError : Foundation.NSError {
  public var errorMessageKey: Swift.String? {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func description() -> Swift.String
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDBankAccountTransaction {
  public var ID: Swift.String
  public var amount: Swift.Double
  public var currency: RapydSDK.RPDCurrency
  public var createdAt: Foundation.Date?
  @objc deinit
}
public struct RPDInstruction {
  public var name: Swift.String {
    get
  }
  public var steps: [RapydSDK.RPDInstructionStep]? {
    get
  }
}
public enum RPDCouponDiscountDurationType {
  case once
  case forever
  case repeating
  public static func == (a: RapydSDK.RPDCouponDiscountDurationType, b: RapydSDK.RPDCouponDiscountDurationType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDCoupon {
  public var ID: Swift.String {
    get
  }
  public var duration: RapydSDK.RPDCouponDiscountDurationType {
    get
  }
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  public var durationInMonths: Swift.UInt? {
    get
  }
  public var isValid: Swift.Bool? {
    get
  }
  public var timesRedeemed: Swift.UInt? {
    get
  }
  public var maxRedemptions: Swift.UInt? {
    get
  }
  public var percentOff: Swift.UInt? {
    get
  }
  public var amountOff: Foundation.Decimal? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var redeemBy: Foundation.Date? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPIITokenData {
  public var ID: Swift.String
  public var personalIDNumber: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var vaultType: Swift.String?
  public var type: Swift.String?
  public var metadata: [Swift.String : Any]?
  public var PII: [Swift.String : Any]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayServiceProviderEWallet {
  public var eWalletID: Swift.String {
    get
  }
  public var percent: Swift.Float {
    get
  }
  public var amount: Foundation.Decimal {
    get
  }
  @objc deinit
}
public enum RPDPaymentMethodCardByFieldsCVVCheckType : Swift.String {
  case pass
  case fail
  case unavailable
  case unchecked
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class RPDPaymentMethodData : RapydSDK.RPDJSONFailableInitializable {
  public var ID: Swift.String {
    get
  }
  public var type: Swift.String? {
    get
  }
  public var category: Swift.String? {
    get
  }
  public var imageURL: Foundation.URL? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var lastFourDigits: Swift.String? {
    get
  }
  public var expirationMonth: Swift.String? {
    get
  }
  public var expirationYear: Swift.String? {
    get
  }
  public var fingerprintToken: Swift.String? {
    get
  }
  public var CVVCheck: RapydSDK.RPDPaymentMethodCardByFieldsCVVCheckType? {
    get
  }
  public var BINDetails: [Swift.String : Any]? {
    get
  }
  required public init?(JSON: [Swift.String : Any])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDSupportedPaymentMethodType {
  public var type: Swift.String
  public var category: Swift.String
  public var name: Swift.String?
  public var country: RapydSDK.RPDCountry?
  public var imageURL: Foundation.URL?
  public var currencies: [RapydSDK.RPDCurrency]?
  public var paymentFlowType: Swift.String?
  public var status: Swift.Int?
  public var isOnline: Swift.Bool?
  public var isCancelable: Swift.Bool?
  public var isExpirable: Swift.Bool?
  @objc deinit
}
public struct RPDInstructionStep {
  public var step: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDUsageRecord {
  public var ID: Swift.String {
    get
  }
  public var quantity: Swift.UInt? {
    get
  }
  public var subscriptionItemID: Swift.String? {
    get
  }
  public var time: Foundation.Date? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDTransactionsManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func transactionsHistory(pageSize: Swift.Int, pageNumber: Swift.Int, completionBlock: @escaping ([RapydSDK.RPDTransaction]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transactionDetails(forTransactionID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDTransactionDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDLocationsManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func fetchLocation(byId locationId: Swift.String, completionBlock: @escaping (RapydSDK.RPDLocation?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchLocation(byLocation location: RapydSDK.RPDLocation, completionBlock: @escaping (RapydSDK.RPDLocation?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchLocations(pageNumber: Swift.Int = 0, pageSize: Swift.Int = 0, query: Swift.String? = nil, completionBlock: @escaping ([RapydSDK.RPDLocation]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchLocations(radius: Swift.Double, coordinate: CoreLocation.CLLocationCoordinate2D, pageNumber: Swift.Int = 0, pageSize: Swift.Int = 0, query: Swift.String? = nil, completionBlock: @escaping ([RapydSDK.RPDLocation]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchLocation(withClusteringByRadius radius: Swift.Double, coordinate: CoreLocation.CLLocationCoordinate2D, zoom: Swift.Float, completionBlock: @escaping ([RapydSDK.RPDLocation]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDEntityHolderType : Swift.String {
  case individual
  case company
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class RPDTokensManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createCardToken(type: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDCardTokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createBankAccountToken(accountHolderName: Swift.String, accountHolderType: RapydSDK.RPDEntityHolderType, bankName: Swift.String, country: RapydSDK.RPDCountry, currency: RapydSDK.RPDCurrency, accountNumber: Swift.String?, routingNumber: Swift.String?, meatdata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDBankAccountTokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createPIIToken(personalIDNumber: Swift.String, PII: [Swift.String : Any]?, clientDetails: Any?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPIITokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveCardToken(withTokenID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDCardTokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveBankAccountToken(withTokenID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDBankAccountTokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrievePIIToken(withTokenID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPIITokenResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDProductManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createProduct(type: RapydSDK.RPDProductType, name: Swift.String, ID: Swift.String?, description: Swift.String?, statementDescriptor: Swift.String?, unitLabel: Swift.String?, images: [RapydSDK.RPDBase64String]?, attributes: [Swift.String]?, isActive: Swift.Bool?, isShippable: Swift.Bool?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDProduct?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateProduct(_ ID: Swift.String, name: Swift.String?, statementDescriptor: Swift.String?, unitLabel: Swift.String?, attributes: [Swift.String]?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDProduct?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveProduct(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDProduct?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listProducts(limit: Swift.UInt?, startingAfter afterProductID: Swift.String?, endingBefore beforeProductID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDProduct]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteProduct(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum RPDInventoryType {
  case finite
  case infinite
  case bucket
  public static func == (a: RapydSDK.RPDInventoryType, b: RapydSDK.RPDInventoryType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDInventoryStatus {
  case inStock
  case outOfStock
  case limited
  public static func == (a: RapydSDK.RPDInventoryStatus, b: RapydSDK.RPDInventoryStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct RPDInventory {
  public var type: RapydSDK.RPDInventoryType {
    get
  }
  public var quantity: Swift.UInt? {
    get
  }
  public var status: RapydSDK.RPDInventoryStatus? {
    get
  }
  public init(type: RapydSDK.RPDInventoryType, quantity: Swift.UInt?, status: RapydSDK.RPDInventoryStatus?)
}
@_hasMissingDesignatedInitializers public class RPDSKU {
  public var ID: Swift.String {
    get
  }
  public var price: Foundation.Decimal {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var attributes: [Swift.String : Any] {
    get
  }
  public var inventory: RapydSDK.RPDInventory {
    get
  }
  public var productID: Swift.String {
    get
  }
  public var imageURL: Foundation.URL? {
    get
  }
  public var isActive: Swift.Bool? {
    get
  }
  public var packageDimension: RapydSDK.RPDProductPackageDimension? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class RPDRequiredField : ObjectiveC.NSObject {
  public var fieldName: Swift.String {
    get
  }
  public var regxValidation: Swift.String {
    get
  }
  public var value: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
open class KeychainWrapper {
  @available(*, deprecated, message: "KeychainWrapper.defaultKeychainWrapper is deprecated since version 2.2.1, use KeychainWrapper.standard instead")
  public static let defaultKeychainWrapper: RapydSDK.KeychainWrapper
  public static let standard: RapydSDK.KeychainWrapper
  public var serviceName: Swift.String {
    get
  }
  public var accessGroup: Swift.String? {
    get
  }
  public init(serviceName: Swift.String, accessGroup: Swift.String? = nil)
  open func hasValue(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  open func accessibilityOfKey(_ key: Swift.String) -> RapydSDK.KeychainItemAccessibility?
  open func allKeys() -> Swift.Set<Swift.String>
  open func integer(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Int?
  open func float(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Float?
  open func double(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Double?
  open func bool(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool?
  open func string(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.String?
  open func object(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Foundation.NSCoding?
  open func data(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Foundation.Data?
  open func dataRef(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Foundation.Data?
  @discardableResult
  open func set(_ value: Swift.Int, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Float, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Double, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.NSCoding, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @available(*, deprecated, message: "remove is deprecated since version 2.2.1, use removeObject instead")
  @discardableResult
  open func remove(key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func removeObject(forKey key: Swift.String, withAccessibility accessibility: RapydSDK.KeychainItemAccessibility? = nil) -> Swift.Bool
  @discardableResult
  open func removeAllKeys() -> Swift.Bool
  open class func wipeKeychain()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutMethodType {
  public var type: Swift.String {
    get
  }
  public var category: RapydSDK.RPDPayoutMethodTypeCategoryType {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var isCancelable: Swift.Bool? {
    get
  }
  public var isExpirable: Swift.Bool? {
    get
  }
  public var isLocationSpecific: Swift.Bool? {
    get
  }
  public var isOnline: Swift.Bool? {
    get
  }
  public var isAvailable: Swift.Bool? {
    get
  }
  public var imageURL: Foundation.URL? {
    get
  }
  public var beneficiaryCountry: RapydSDK.RPDCountry? {
    get
  }
  public var payoutCurrencies: [RapydSDK.RPDCurrency]? {
    get
  }
  public var senderCurrencies: [RapydSDK.RPDCurrency]? {
    get
  }
  public var senderEntityTypes: [RapydSDK.RPDEntityHolderType]? {
    get
  }
  public var beneficiaryEntityTypes: [RapydSDK.RPDEntityHolderType]? {
    get
  }
  public var amountRanges: [RapydSDK.RPDAmountRangePerCurrency]? {
    get
  }
  public var minimumExpirationForCompletePayout: Swift.Int? {
    get
  }
  public var maximumExpirationForCompletePayout: Swift.Int? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDBankAccount : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var bankCountry: RapydSDK.RPDCountry {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var beneficiaryCountry: RapydSDK.RPDCountry {
    get
  }
  public var bankAccountHolderName: Swift.String {
    get
  }
  public var bankName: Swift.String {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum SignatureAlgorithm {
  case hmac256, sha256
  public static func == (a: RapydSDK.SignatureAlgorithm, b: RapydSDK.SignatureAlgorithm) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class RPDSDK : ObjectiveC.NSObject {
  public static var signatureAlgorithm: RapydSDK.SignatureAlgorithm
  public static var debugMode: Swift.Bool
  public static func setup(accessKey: Swift.String, secretKey: Swift.String)
  public static var versionNumber: Swift.String? {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDPaymentManager : RapydSDK.RPDSkillsPackage {
  @available(*, deprecated, message: "Use createPayment(amount:...) function")
  @discardableResult
  public func createPayment(paymentRequest: RapydSDK.RPDPaymentRequest, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func createPayment(amount: Foundation.Decimal, currency: RapydSDK.RPDCurrency, paymentMethodRequiredFields: RapydSDK.RPDPaymentMethodRequiredFields?, paymentMethodID: Swift.String?, eWallets: [RapydSDK.RPDEWallet]?, completePaymentURL: Swift.String? = nil, errorPaymentURL: Swift.String? = nil, description: Swift.String? = nil, expirationAt: Foundation.Date? = nil, merchantReferenceID: Swift.String? = nil, requestedCurrency: RapydSDK.RPDCurrency? = nil, isCapture: Swift.Bool? = nil, statementDescriptor: Swift.String? = nil, address: RapydSDK.RPDAddress? = nil, customerID: Swift.String? = nil, receiptEmail: Swift.String? = nil, showIntermediateReturnPage: Swift.Bool? = nil, isEscrow: Swift.Bool? = nil, releaseEscrowDays: Swift.UInt? = nil, paymentFees: RapydSDK.RPDPaymentFees? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @available(*, deprecated, message: "Use createPayment(amount:...) function")
  @discardableResult
  public func createPayment(amount: Foundation.Decimal, currency: RapydSDK.RPDCurrency, paymentMethodType: Swift.String?, paymentMethodRequiredField: [RapydSDK.RPDPaymentMethodRequiredField]?, paymentMethodOptions: [RapydSDK.RPDPaymentMethodRequiredField]? = nil, paymentMethodID: Swift.String? = nil, eWallets: [RapydSDK.RPDEWallet]? = nil, completePaymentURL: Swift.String? = nil, errorPaymentURL: Swift.String? = nil, description: Swift.String? = nil, expirationAt: Foundation.Date? = nil, merchantReferenceID: Swift.String? = nil, requestedCurrency: RapydSDK.RPDCurrency? = nil, isCapture: Swift.Bool? = nil, statementDescriptor: Swift.String? = nil, address: RapydSDK.RPDAddress? = nil, customerID: Swift.String? = nil, receiptEmail: Swift.String? = nil, showIntermediateReturnPage: Swift.Bool? = nil, isEscrow: Swift.Bool? = nil, releaseEscrowDays: Swift.UInt? = nil, paymentFees: RapydSDK.RPDPaymentFees? = nil, metadata: [Swift.String : Any]? = nil, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updatePayment(byID ID: Swift.String, address: RapydSDK.RPDAddress?, receiptEmail: Swift.String?, isEscrow: Swift.Bool?, description: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrievePayment(byID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func capturePayment(byID ID: Swift.String, amount: Foundation.Decimal?, receiptEmail: Swift.String?, statementDescriptor: Swift.String?, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func cancelPayment(forID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDPayment?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listPayments(limit: Swift.UInt?, startingAfter afterPaymentID: Swift.String?, endingBefore beforePaymentID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDPayment]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func createRefund(forPaymentID ID: Swift.String, amount: Foundation.Decimal?, merchantReferenceID: Swift.String?, reason: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateRefund(forID ID: Swift.String, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func completeRefund(byID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveRefund(byID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDRefund?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listRefunds(limit: Swift.UInt?, startingAfter afterRefundID: Swift.String?, endingBefore beforeRefundID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDRefund]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listRefundsByPayment(_ ID: Swift.String, completionBlock: @escaping ([RapydSDK.RPDRefund]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc override dynamic public init()
  @objc deinit
}
public enum RPDPaymentOutcomeNetworkStatus {
  case approvedByNetwork
  case declinedByNetwork
  case notSentToNetwork
  case reversedAfterApproval
  public static func == (a: RapydSDK.RPDPaymentOutcomeNetworkStatus, b: RapydSDK.RPDPaymentOutcomeNetworkStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPaymentOutcomeType {
  case authorized
  case manualReview
  case issuerDeclined
  case blocked
  case invalid
  public static func == (a: RapydSDK.RPDPaymentOutcomeType, b: RapydSDK.RPDPaymentOutcomeType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPaymentOutcomeRiskLevel {
  case normal
  case elevated
  case highest
  case notAssessed
  public static func == (a: RapydSDK.RPDPaymentOutcomeRiskLevel, b: RapydSDK.RPDPaymentOutcomeRiskLevel) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPaymentOutcomeReason {
  case highestRiskLevel
  case elevatedRiskLevel
  case rule
  public static func == (a: RapydSDK.RPDPaymentOutcomeReason, b: RapydSDK.RPDPaymentOutcomeReason) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class RPDPaymentOutcome {
  public var type: RapydSDK.RPDPaymentOutcomeType {
    get
  }
  public var networkStatus: RapydSDK.RPDPaymentOutcomeNetworkStatus? {
    get
  }
  public var riskLevel: RapydSDK.RPDPaymentOutcomeRiskLevel? {
    get
  }
  public var sellerMessage: Swift.String? {
    get
  }
  public var reason: RapydSDK.RPDPaymentOutcomeReason? {
    get
  }
  @objc deinit
}
public enum TrasferStatus : Swift.String {
  case pen
  case clo
  case can
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDUserTransferDetails : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var status: RapydSDK.TrasferStatus {
    get
  }
  public var amount: Swift.Double {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var destinationPhoneNumber: Swift.String {
    get
  }
  public var transferResponseAt: Foundation.Date {
    get
  }
  public var createdAt: Foundation.Date {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDFundsManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func create(code: Swift.String, user: RapydSDK.RPDUser, amount: Swift.String, currency: RapydSDK.RPDCurrency, expiredDate: Foundation.Date, completionBlock: @escaping (Swift.String?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func codeReport(startDate: Foundation.Date, endDate: Foundation.Date, completionBlock: @escaping ([RapydSDK.RPDCodeDetails]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteCode(withCodeId codeId: Swift.String, code: Swift.String, completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func codeDetails(withCodeId codeId: Swift.String, completionBlock: @escaping (RapydSDK.RPDCodeDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func codeDetails(withCode code: Swift.String, completionBlock: @escaping (RapydSDK.RPDCodeDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc override dynamic public init()
  @objc deinit
}
public enum RPDPlanInterval {
  case day
  case week
  case month
  case year
  public static func == (a: RapydSDK.RPDPlanInterval, b: RapydSDK.RPDPlanInterval) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPlanUsageType {
  case metered
  case licensed
  public static func == (a: RapydSDK.RPDPlanUsageType, b: RapydSDK.RPDPlanUsageType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPlanAggregateUsage {
  case max
  case sum
  case lastDuringPeriod
  case lastEver
  public static func == (a: RapydSDK.RPDPlanAggregateUsage, b: RapydSDK.RPDPlanAggregateUsage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPlanBillingScheme {
  case perUnit
  case tiered
  public static func == (a: RapydSDK.RPDPlanBillingScheme, b: RapydSDK.RPDPlanBillingScheme) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPlanTiersMode {
  case graduated
  case volume
  public static func == (a: RapydSDK.RPDPlanTiersMode, b: RapydSDK.RPDPlanTiersMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum RPDPlanTierUpTo {
  case max
  case value(Foundation.Decimal)
}
public struct RPDPlanTier {
  public var price: Foundation.Decimal {
    get
  }
  public var upTo: RapydSDK.RPDPlanTierUpTo {
    get
  }
  public init(price: Foundation.Decimal, upTo: RapydSDK.RPDPlanTierUpTo)
}
public enum RPDPlanTransformUsageRound {
  case up
  case down
  public static func == (a: RapydSDK.RPDPlanTransformUsageRound, b: RapydSDK.RPDPlanTransformUsageRound) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct RPDPlanTransformUsage {
  public var divideBy: Swift.UInt {
    get
  }
  public var transformUsageRound: RapydSDK.RPDPlanTransformUsageRound {
    get
  }
  public init(divideBy: Swift.UInt, transformUsageRound: RapydSDK.RPDPlanTransformUsageRound)
}
@_hasMissingDesignatedInitializers public class RPDPlan {
  public var ID: Swift.String {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var interval: RapydSDK.RPDPlanInterval {
    get
  }
  public var intervalCount: Swift.UInt? {
    get
  }
  public var product: RapydSDK.RPDProduct? {
    get
  }
  public var nickname: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var trialPeriodDays: Swift.UInt? {
    get
  }
  public var billingScheme: RapydSDK.RPDPlanBillingScheme? {
    get
  }
  public var amount: Foundation.Decimal? {
    get
  }
  public var usageType: RapydSDK.RPDPlanUsageType? {
    get
  }
  public var aggregateUsage: RapydSDK.RPDPlanAggregateUsage? {
    get
  }
  public var tiers: [RapydSDK.RPDPlanTier]? {
    get
  }
  public var tiersMode: RapydSDK.RPDPlanTiersMode? {
    get
  }
  public var transformUsage: RapydSDK.RPDPlanTransformUsage? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDTransferRequest : ObjectiveC.NSObject {
  public var currency: RapydSDK.RPDCurrency
  public var amount: Swift.String
  public var destination: Swift.String
  public init(currency: RapydSDK.RPDCurrency, amount: Swift.String, destination: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutRequiredField {
  public var name: Swift.String {
    get
  }
  public var regex: Swift.String? {
    get
  }
  public var type: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var value: Swift.String?
  public init(name: Swift.String, type: Swift.String, regex: Swift.String?, description: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDCardTokenData {
  public var ID: Swift.String
  public var CVVCheck: RapydSDK.RPDPaymentMethodCardByFieldsCVVCheckType?
  public var lastFourDigits: Swift.String?
  public var fingerprintToken: Swift.String?
  public var metadata: [Swift.String : Any]?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
  public var BINDetails: [Swift.String : Any]?
  public var type: Swift.String?
  public var vaultType: Swift.String?
  public var expirationMonth: Swift.String?
  public var expirationYear: Swift.String?
  public var name: Swift.String?
  public var address: RapydSDK.RPDAddress?
  public var status: RapydSDK.RPDCardIssueStatus?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDSkillsPackage : ObjectiveC.NSObject {
  public var idempotency: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDServiceProvider {
  public var type: Swift.String
  public var catalogType: Swift.String
  public var isCancelable: Swift.Bool
  public var country: RapydSDK.RPDCountry
  public var isActive: Swift.Bool
  public var brand: Swift.String?
  public var iconURL: Foundation.URL?
  public var catalogSubtype: Swift.String?
  public var instructions: [RapydSDK.RPDInstruction]?
  public var availableAmounts: [Swift.String]?
  public var recurrencyOptions: [Swift.String : Any]?
  public var catalogSubtypeOptions: [RapydSDK.RPDServiceProviderRequiredField]?
  public var requiredFields: [RapydSDK.RPDServiceProviderRequiredField]?
  public var isRechargeable: Swift.Bool?
  public var isBalanceCheckSupported: Swift.Bool?
  public var hoursToFulfill: Swift.Int?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDAddressManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createAddress(withName name: Swift.String, line1: Swift.String, line2: Swift.String?, line3: Swift.String?, city: Swift.String?, district: Swift.String?, canton: Swift.String?, state: Swift.String?, country: RapydSDK.RPDCountry?, zip: Swift.String?, phoneNumber: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDAddress?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateAddress(withAddressID ID: Swift.String, name: Swift.String?, line1: Swift.String?, line2: Swift.String?, line3: Swift.String?, city: Swift.String?, district: Swift.String?, canton: Swift.String?, state: Swift.String?, country: RapydSDK.RPDCountry?, zip: Swift.String?, phoneNumber: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDAddress?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveAddress(withAddressID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDAddress?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class RPDCustomer {
  public var ID: Swift.String {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var email: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var delinquent: Swift.Bool? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var eWallet: Swift.String? {
    get
  }
  public var businessVATID: Swift.String? {
    get
  }
  public var invoicePrefix: Swift.String? {
    get
  }
  public var addresses: [RapydSDK.RPDAddress]? {
    get
  }
  public var defaultPaymentMethod: Swift.String? {
    get
  }
  public var paymentMethodsMoreData: RapydSDK.RPDMoreData<RapydSDK.RPDPaymentMethodData>? {
    get
  }
  @objc deinit
}
public protocol RPDJSONFailableInitializable {
  init?(JSON: [Swift.String : Any])
}
@_hasMissingDesignatedInitializers public class RPDMoreData<T> where T : RapydSDK.RPDJSONFailableInitializable {
  public var dataList: [T]?
  public var hasMore: Swift.Bool?
  public var total: Swift.Int?
  @available(*, deprecated, message: "Please use the appropriate Manager to get more objects")
  public var allDataURL: Foundation.URL?
  @objc deinit
}
public enum TransferReplyType : Swift.String {
  case accept
  case decline
  case cancel
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use RPDAccountsManager class instead")
public class RPDTransferManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func transfer(toUserWithTransferRequest transferReq: RapydSDK.RPDTransferRequest, completionBlock: @escaping (RapydSDK.RPDUserTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transfer(toAccountWithTransferRequest transferReq: RapydSDK.RPDTransferRequest, completionBlock: @escaping (RapydSDK.RPDAccountTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func transfer(replyWithTransferId id: Swift.String, status: RapydSDK.TransferReplyType, completionBlock: @escaping (RapydSDK.RPDUserTransferDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDCustomerManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createCustomer(withName name: Swift.String, email: Swift.String?, phoneNumber: Swift.String?, addresses: [RapydSDK.RPDAddress]?, businessVATID: Swift.String?, couponID: Swift.String?, invoicePrefix: Swift.String?, paymentMethod: RapydSDK.RPDMinimalPaymentMethod?, eWalletID: Swift.String?, description: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDCustomer?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateCustomer(withID ID: Swift.String, name: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, addresses: [RapydSDK.RPDAddress]?, businessVATID: Swift.String?, couponID: Swift.String?, invoicePrefix: Swift.String?, defaultPaymentMethod: Swift.String?, eWalletID: Swift.String?, description: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDCustomer?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func addPaymentMethod(type: Swift.String, customerID: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, token: Swift.String?, address: RapydSDK.RPDAddress?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPaymentMethodData?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func updatePaymentMethod(withID ID: Swift.String, customerID: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, address: RapydSDK.RPDAddress?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDPaymentMethodData?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func listCustomers(startingAfter afterCustomerID: Swift.String?, endingBefore beforeCustomerID: Swift.String?, limit: Swift.UInt?, completionBlock: @escaping ([RapydSDK.RPDCustomer]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveCustomer(with ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDCustomer?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrievePaymentMethod(forCustomer ID: Swift.String, paymentMethod: Swift.String, completionBlock: @escaping (RapydSDK.RPDPaymentMethodData?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listPaymentMethods(ofCustomer ID: Swift.String, type: Swift.String?, startingAfter afterPaymentMethodID: Swift.String?, endingBeforer beforePaymentMethodID: Swift.String?, limit: Swift.UInt?, completionBlock: @escaping ([RapydSDK.RPDPaymentMethodData]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteCustomer(withID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deletePaymentMethod(_ paymentMethodID: Swift.String, forCustomer ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteDiscount(forCustomer ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc override dynamic public init()
  @objc deinit
}
public struct RPDMinimalPaymentMethod {
  public var type: Swift.String
  public var requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?
  public var metadata: [Swift.String : Any]?
  public init(type: Swift.String, requiredFields: [RapydSDK.RPDPaymentMethodRequiredField]?, metadata: [Swift.String : Any]?)
}
public enum RPDProductType {
  case services
  case goods
  public static func == (a: RapydSDK.RPDProductType, b: RapydSDK.RPDProductType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct RPDProductPackageDimension {
  public var length: Swift.Float
  public var weight: Swift.Float
  public var width: Swift.Float
  public var height: Swift.Float
  public init(length: Swift.Float, weight: Swift.Float, width: Swift.Float, height: Swift.Float)
}
public typealias RPDBase64String = Swift.String
@_hasMissingDesignatedInitializers public class RPDProduct {
  public var ID: Swift.String {
    get
  }
  public var type: RapydSDK.RPDProductType {
    get
  }
  public var name: Swift.String {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var statementDescriptor: Swift.String? {
    get
  }
  public var unitLabel: Swift.String? {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
  public var isActive: Swift.Bool? {
    get
  }
  public var isShippable: Swift.Bool? {
    get
  }
  public var metadata: [Swift.String : Any]? {
    get
  }
  public var packageDimension: RapydSDK.RPDProductPackageDimension? {
    get
  }
  public var images: [RapydSDK.RPDBase64String]? {
    get
  }
  public var attributes: [Swift.String]? {
    get
  }
  public var SKUs: [RapydSDK.RPDSKU]? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDTransactionDetails : RapydSDK.RPDEntity {
  public var id: Swift.String {
    get
  }
  public var amount: Swift.Double? {
    get
  }
  public var currency: RapydSDK.RPDCurrency {
    get
  }
  public var type: Swift.String {
    get
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var eWalletID: Swift.String {
    get
  }
  public var actionData: [Swift.String : Any]? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDCheckConsumerAccountBalanceServiceProviderResponse {
  public var type: Swift.String
  public var amount: Foundation.Decimal
  public var currency: RapydSDK.RPDCurrency
  public var payOptions: RapydSDK.RPDServiceProviderCheckConsumerAccountBalancePayOptions?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDOTPCode : ObjectiveC.NSObject {
  public var code: Swift.String {
    get
  }
  public var expirationTimeInSeconds: Swift.Int {
    get
  }
  public var maximumDurationInSeconds: Swift.Int {
    get
  }
  public var error: RapydSDK.RPDError? {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDDataManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func fetchSupportedCurrencies(completionBlock: @escaping ([RapydSDK.RPDCurrency]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchSupportedCountries(completionBlock: @escaping ([RapydSDK.RPDCountry]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDFundsDetails : RapydSDK.RPDEntity {
  public static func fundsDetails(with id: Swift.String) -> RapydSDK.RPDFundsDetails
  public var id: Swift.String {
    get
  }
  public var accountId: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var amount: Swift.Double? {
    get
  }
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum KeychainItemAccessibility {
  @available(iOS 4, *)
  case afterFirstUnlock
  @available(iOS 4, *)
  case afterFirstUnlockThisDeviceOnly
  @available(iOS 4, *)
  case always
  @available(iOS 8, *)
  case whenPasscodeSetThisDeviceOnly
  @available(iOS 4, *)
  case alwaysThisDeviceOnly
  @available(iOS 4, *)
  case whenUnlocked
  @available(iOS 4, *)
  case whenUnlockedThisDeviceOnly
  public static func == (a: RapydSDK.KeychainItemAccessibility, b: RapydSDK.KeychainItemAccessibility) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class RPDCouponManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createCoupon(duration: RapydSDK.RPDCouponDiscountDurationType, durationInMonths: Swift.UInt?, ID: Swift.String?, currency: RapydSDK.RPDCurrency?, amountOff: Foundation.Decimal?, percentOff: Swift.UInt?, redeemBy: Foundation.Date?, maxRedemptions: Swift.UInt?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDCoupon?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateCoupon(for ID: Swift.String, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDCoupon?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveCoupon(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDCoupon?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listCoupons(limit: Swift.UInt?, startingAfter afterCouponID: Swift.String?, endingBefore beforeCouponID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDCoupon]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteCoupon(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDIdentityManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func supportedDocumentsByCountry(_ country: RapydSDK.RPDCountry, completionBlock: @escaping ([RapydSDK.RPDDocumentType]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func performIdentityVerification(identity: RapydSDK.RPDIdentity, completionBlock: @escaping (RapydSDK.RPDIndentityDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class RPDTokenResponse {
  public var tokenID: Swift.String
  public var vaultToken: Swift.String
  public var type: Swift.String?
  public var isUsed: Swift.Bool?
  public var createdAt: Foundation.Date?
  public var clientIP: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDBankAccountManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func fetchRequiredFields(bankCountry: RapydSDK.RPDCountry, userCountry: RapydSDK.RPDCountry, accountCurrency: RapydSDK.RPDCurrency, completionBlock: @escaping ([RapydSDK.RPDBankAccountRegister]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func validate(bankAccountRegister: RapydSDK.RPDBankAccountRegister, completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func create(bankAccountWithRegister bankRegister: RapydSDK.RPDBankAccountRegister, completionBlock: @escaping (RapydSDK.RPDBankAccount?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func delete(bankAccountWithId id: Swift.String, completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func delete(bankAccountWithAccount account: RapydSDK.RPDBankAccount, completionBlock: @escaping (RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetch(bankAccountWithId id: Swift.String, completionBlock: @escaping (RapydSDK.RPDBankAccount?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func fetchAccounts(completionBlock: @escaping ([RapydSDK.RPDBankAccount]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class RPDServiceProviderRequiredField {
  public var name: Swift.String
  public var type: Swift.String
  public var isRequired: Swift.Bool
  public var regex: Swift.String?
  public var instructions: [RapydSDK.RPDInstruction]?
  public var value: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDBankAccountTokenResponse : RapydSDK.RPDTokenResponse {
  public var tokenData: RapydSDK.RPDBankAccountTokenData?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutRequiredFieldsDetails {
  public var beneficiaryRequiredFields: [RapydSDK.RPDPayoutRequiredField]? {
    get
  }
  public var senderRequiredFields: [RapydSDK.RPDPayoutRequiredField]? {
    get
  }
  public var isCancelable: Swift.Bool? {
    get
  }
  public var isOnline: Swift.Bool? {
    get
  }
  public var isExpirable: Swift.Bool? {
    get
  }
  public var imageURL: Foundation.URL? {
    get
  }
  public var isLocationSpecific: Swift.Bool? {
    get
  }
  public var batchFileHeader: Swift.String? {
    get
  }
  public var payoutMethodType: Swift.String? {
    get
  }
  public var senderCountry: RapydSDK.RPDCountry? {
    get
  }
  public var senderCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var senderEntityType: RapydSDK.RPDEntityHolderType? {
    get
  }
  public var beneficiaryCountry: RapydSDK.RPDCountry? {
    get
  }
  public var beneficiaryEntityType: RapydSDK.RPDEntityHolderType? {
    get
  }
  public var payoutCurrency: RapydSDK.RPDCurrency? {
    get
  }
  public var status: Swift.Bool? {
    get
  }
  public var maximumAmount: Foundation.Decimal? {
    get
  }
  public var minimumAmount: Foundation.Decimal? {
    get
  }
  public var maximumExpirationInSeconds: Swift.UInt? {
    get
  }
  public var minimumExpirationInSeconds: Swift.UInt? {
    get
  }
  @objc deinit
}
public struct RPDServiceProviderCheckConsumerAccountBalancePayOptions {
  public var currency: RapydSDK.RPDCurrency
  public var topupOptions: [Swift.Double]
}
@objc @_inheritsConvenienceInitializers public class RPDPaycodeManager : RapydSDK.RPDFundsManager {
  public var cart: [[Swift.String : Any]]
  @objc override dynamic public init()
  @discardableResult
  public func fetchPaycodeList(completionBlock: @escaping ([RapydSDK.RPDCodeDetails]?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @discardableResult
  public func mergeAllPaycode(withComplitionBlock completionBlock: @escaping (RapydSDK.RPDCodeDetails?, RapydSDK.RPDError?) -> Swift.Void) -> RapydSDK.RPDTask?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutTransferPartaker {
  public var ID: Swift.String {
    get
  }
  public var currency: RapydSDK.RPDCurrency? {
    get
  }
  public var country: RapydSDK.RPDCountry? {
    get
  }
  public var entityHolderType: RapydSDK.RPDEntityHolderType? {
    get
  }
  public var extraFields: [Swift.String : Any]? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDIssueCard : RapydSDK.RPDCardIssuing {
  public var cardNumber: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RPDBankAccountNumberIssuingManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func issueBankAccount(country: RapydSDK.RPDCountry, currency: RapydSDK.RPDCurrency, description: Swift.String?, merchantReferenceID: Swift.String?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDBankAccountNumberIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveIssuedBankAccount(withID ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDBankAccountNumberIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveTransaction(forIssuedBankAccount ID: Swift.String, transaction: Swift.String, completionBlock: @escaping (RapydSDK.RPDBankAccountTransaction?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func simulateDeposite(toIssuedBankAccount ID: Swift.String, amount: Swift.Double, currency: RapydSDK.RPDCurrency, completionBlock: @escaping (RapydSDK.RPDBankAccountNumberIssuing?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class RPDSKUManager : RapydSDK.RPDSkillsPackage {
  @discardableResult
  public func createSKU(productID: Swift.String, price: Foundation.Decimal, currency: RapydSDK.RPDCurrency, attributes: [Swift.String : Any], inventory: RapydSDK.RPDInventory, ID: Swift.String?, isActive: Swift.Bool?, imageURL: Foundation.URL?, packageDimension: RapydSDK.RPDProductPackageDimension?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSKU?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func updateSKU(_ ID: Swift.String, productID: Swift.String?, price: Foundation.Decimal?, currency: RapydSDK.RPDCurrency?, attributes: [Swift.String : Any]?, inventory: RapydSDK.RPDInventory?, isActive: Swift.Bool?, imageURL: Foundation.URL?, packageDimension: RapydSDK.RPDProductPackageDimension?, metadata: [Swift.String : Any]?, completionBlock: @escaping (RapydSDK.RPDSKU?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func retrieveSKU(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDSKU?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func listSKUs(isActive: Swift.Bool?, limit: Swift.UInt?, startingAfter afterSKUID: Swift.String?, endingBefore beforeSKUID: Swift.String?, completionBlock: @escaping ([RapydSDK.RPDSKU]?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @discardableResult
  public func deleteSKU(_ ID: Swift.String, completionBlock: @escaping (RapydSDK.RPDDeleteResponse?, RapydSDK.RPDError?) -> ()) -> RapydSDK.RPDTask?
  @objc deinit
  @objc override dynamic public init()
}
public enum Algorithm {
  case md5, sha1, sha224, sha256, sha384, sha512
  public var digestLength: Swift.Int {
    get
  }
  public static func == (a: RapydSDK.Algorithm, b: RapydSDK.Algorithm) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Hashable {
  associatedtype Hash
  func digest(_ algorithm: RapydSDK.Algorithm, key: Swift.String?) -> Self.Hash
  var md5: Self.Hash { get }
  var sha1: Self.Hash { get }
  var sha224: Self.Hash { get }
  var sha256: Self.Hash { get }
  var sha384: Self.Hash { get }
  var sha512: Self.Hash { get }
}
extension Hashable {
  public var md5: Self.Hash {
    get
  }
  public var sha1: Self.Hash {
    get
  }
  public var sha224: Self.Hash {
    get
  }
  public var sha256: Self.Hash {
    get
  }
  public var sha384: Self.Hash {
    get
  }
  public var sha512: Self.Hash {
    get
  }
}
extension String : RapydSDK.Hashable {
  public func digest(_ algorithm: RapydSDK.Algorithm) -> Swift.String
  public func digest(_ algorithm: RapydSDK.Algorithm, key: Swift.String?) -> Swift.String
  public func digest(_ algorithm: RapydSDK.Algorithm, key: Foundation.Data?) -> Swift.String
  public typealias Hash = Swift.String
}
extension Data : RapydSDK.Hashable {
  public func digest(_ algorithm: RapydSDK.Algorithm) -> Foundation.Data
  public func digest(_ algorithm: RapydSDK.Algorithm, key: Swift.String?) -> Foundation.Data
  public func digest(_ algorithm: RapydSDK.Algorithm, key: Foundation.Data?) -> Foundation.Data
  public typealias Hash = Foundation.Data
}
@objc @_hasMissingDesignatedInitializers public class RPDTask : ObjectiveC.NSObject {
  public var operationID: Swift.String?
  public var isLoading: Swift.Bool {
    get
  }
  public func cancel()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RPDPayoutValidateBeneficiaryResponse {
  public var isValidated: Swift.Bool {
    get
  }
  public var beneficiary: RapydSDK.RPDPayoutValidateBeneficiary? {
    get
  }
  @objc deinit
}
public struct RPDEWallet {
  public enum EWalletPaymentType : Swift.String {
    case amount
    case percentage
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
  }
  public var ID: Swift.String {
    get
  }
  public var paymentType: RapydSDK.RPDEWallet.EWalletPaymentType {
    get
  }
  public var paymentValue: Foundation.Decimal {
    get
  }
  public init(ID: Swift.String, paymentValue: Foundation.Decimal, paymentType: RapydSDK.RPDEWallet.EWalletPaymentType)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDDocumentType : RapydSDK.RPDEntity {
  public var country: RapydSDK.RPDCountry? {
    get
    set
  }
  public var type: Swift.String? {
    get
    set
  }
  public var name: Swift.String? {
    get
    set
  }
  public var isBackRequired: Swift.Bool {
    get
    set
  }
  public var setIsAddressExtractable: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
@available(*, deprecated, message: "Use RPDUserStatus")
public enum UserStatus : Swift.String {
  case enabled
  case disabled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum RPDWalletType : Swift.String {
  case person
  case company
  case client
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum RPDUserStatus : Swift.String {
  case enabled
  case disabled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum RPDClientWalletType : Swift.String {
  case collect
  case disburse
  case cardAuthorization
  case general
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RPDUser : Swift.Codable {
  public var id: Swift.String? {
    get
  }
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var email: Swift.String?
  public var phoneNumber: Swift.String?
  public var metadata: [Swift.String : Any]?
  public var eWalletReferenceID: Swift.String?
  public var eWalletType: RapydSDK.RPDWalletType? {
    get
  }
  public var status: RapydSDK.RPDUserStatus? {
    get
  }
  public var clientWalletType: RapydSDK.RPDClientWalletType? {
    get
  }
  public var contacts: RapydSDK.RPDSaveableMoreData<RapydSDK.RPDEWalletContact>? {
    get
  }
  public init()
  public static func currentUser() -> RapydSDK.RPDUser?
  public static func detachUser()
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RPDCountry : RapydSDK.RPDEntity {
  public static func country(isoAlpha2: Swift.String) -> RapydSDK.RPDCountry
  public var id: Swift.Int {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var isoAlpha2: Swift.String {
    get
  }
  public var isoAlpha3: Swift.String? {
    get
  }
  public var currencyCode: Swift.String? {
    get
  }
  public var currencyName: Swift.String? {
    get
  }
  public var currencySign: Swift.String? {
    get
  }
  public var phoneCode: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension RapydSDK.RPDPayoutMethodTypeCategoryType : Swift.Equatable {}
extension RapydSDK.RPDPayoutMethodTypeCategoryType : Swift.Hashable {}
extension RapydSDK.RPDPayoutMethodTypeCategoryType : Swift.RawRepresentable {}
extension RapydSDK.RPDPayoutStatus : Swift.Equatable {}
extension RapydSDK.RPDPayoutStatus : Swift.Hashable {}
extension RapydSDK.RPDPayoutStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDWalletContactBusinessEntityType : Swift.Equatable {}
extension RapydSDK.RPDWalletContactBusinessEntityType : Swift.Hashable {}
extension RapydSDK.RPDWalletContactBusinessEntityType : Swift.RawRepresentable {}
extension RapydSDK.RPDPayServiceProviderStatus : Swift.Equatable {}
extension RapydSDK.RPDPayServiceProviderStatus : Swift.Hashable {}
extension RapydSDK.RPDPayServiceProviderStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDRefundFailureReason : Swift.Equatable {}
extension RapydSDK.RPDRefundFailureReason : Swift.Hashable {}
extension RapydSDK.RPDRefundFailureReason : Swift.RawRepresentable {}
extension RapydSDK.RPDRefundStatus : Swift.Equatable {}
extension RapydSDK.RPDRefundStatus : Swift.Hashable {}
extension RapydSDK.RPDRefundStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDUsageRecordAction : Swift.Equatable {}
extension RapydSDK.RPDUsageRecordAction : Swift.Hashable {}
extension RapydSDK.CurrencyUsage : Swift.Equatable {}
extension RapydSDK.CurrencyUsage : Swift.Hashable {}
extension RapydSDK.CurrencyUsage : Swift.RawRepresentable {}
extension RapydSDK.RPDValidateServiceProviderResponseStatus : Swift.Equatable {}
extension RapydSDK.RPDValidateServiceProviderResponseStatus : Swift.Hashable {}
extension RapydSDK.RPDBankAccountNumberIssuingStatus : Swift.Equatable {}
extension RapydSDK.RPDBankAccountNumberIssuingStatus : Swift.Hashable {}
extension RapydSDK.RPDBankAccountNumberIssuingStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDEWalletContactType : Swift.Equatable {}
extension RapydSDK.RPDEWalletContactType : Swift.Hashable {}
extension RapydSDK.RPDEWalletContactType : Swift.RawRepresentable {}
extension RapydSDK.RPDGenderType : Swift.Equatable {}
extension RapydSDK.RPDGenderType : Swift.Hashable {}
extension RapydSDK.RPDGenderType : Swift.RawRepresentable {}
extension RapydSDK.RPDResidenceType : Swift.Equatable {}
extension RapydSDK.RPDResidenceType : Swift.Hashable {}
extension RapydSDK.RPDResidenceType : Swift.RawRepresentable {}
extension RapydSDK.RPDMaritalStatusType : Swift.Equatable {}
extension RapydSDK.RPDMaritalStatusType : Swift.Hashable {}
extension RapydSDK.RPDMaritalStatusType : Swift.RawRepresentable {}
extension RapydSDK.RPDWalletContactVerificationStatus : Swift.Equatable {}
extension RapydSDK.RPDWalletContactVerificationStatus : Swift.Hashable {}
extension RapydSDK.RPDWalletContactVerificationStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDEscrowStatus : Swift.Equatable {}
extension RapydSDK.RPDEscrowStatus : Swift.Hashable {}
extension RapydSDK.RPDCardIssueStatus : Swift.Equatable {}
extension RapydSDK.RPDCardIssueStatus : Swift.Hashable {}
extension RapydSDK.RPDCardIssueStatus : Swift.RawRepresentable {}
extension RapydSDK.FixedSide : Swift.Equatable {}
extension RapydSDK.FixedSide : Swift.Hashable {}
extension RapydSDK.FixedSide : Swift.RawRepresentable {}
extension RapydSDK.RPDPaymentFeeCalcType : Swift.Equatable {}
extension RapydSDK.RPDPaymentFeeCalcType : Swift.Hashable {}
extension RapydSDK.RPDPaymentFeeType : Swift.Equatable {}
extension RapydSDK.RPDPaymentFeeType : Swift.Hashable {}
extension RapydSDK.RPDSubscriptionBilling : Swift.Equatable {}
extension RapydSDK.RPDSubscriptionBilling : Swift.Hashable {}
extension RapydSDK.RPDSubscriptionStatus : Swift.Equatable {}
extension RapydSDK.RPDSubscriptionStatus : Swift.Hashable {}
extension RapydSDK.RPDPaymentStatus : Swift.Equatable {}
extension RapydSDK.RPDPaymentStatus : Swift.Hashable {}
extension RapydSDK.RPDPaymentMethodTypeCategory : Swift.Equatable {}
extension RapydSDK.RPDPaymentMethodTypeCategory : Swift.Hashable {}
extension RapydSDK.RPDCurrencyFixedSide : Swift.Equatable {}
extension RapydSDK.RPDCurrencyFixedSide : Swift.Hashable {}
extension RapydSDK.RPDCurrencyFixedSide : Swift.RawRepresentable {}
extension RapydSDK.RPDPurchaseCurrencyStatus : Swift.Equatable {}
extension RapydSDK.RPDPurchaseCurrencyStatus : Swift.Hashable {}
extension RapydSDK.RPDCouponDiscountDurationType : Swift.Equatable {}
extension RapydSDK.RPDCouponDiscountDurationType : Swift.Hashable {}
extension RapydSDK.RPDPaymentMethodCardByFieldsCVVCheckType : Swift.Equatable {}
extension RapydSDK.RPDPaymentMethodCardByFieldsCVVCheckType : Swift.Hashable {}
extension RapydSDK.RPDPaymentMethodCardByFieldsCVVCheckType : Swift.RawRepresentable {}
extension RapydSDK.RPDEntityHolderType : Swift.Equatable {}
extension RapydSDK.RPDEntityHolderType : Swift.Hashable {}
extension RapydSDK.RPDEntityHolderType : Swift.RawRepresentable {}
extension RapydSDK.RPDInventoryType : Swift.Equatable {}
extension RapydSDK.RPDInventoryType : Swift.Hashable {}
extension RapydSDK.RPDInventoryStatus : Swift.Equatable {}
extension RapydSDK.RPDInventoryStatus : Swift.Hashable {}
extension RapydSDK.SignatureAlgorithm : Swift.Equatable {}
extension RapydSDK.SignatureAlgorithm : Swift.Hashable {}
extension RapydSDK.RPDPaymentOutcomeNetworkStatus : Swift.Equatable {}
extension RapydSDK.RPDPaymentOutcomeNetworkStatus : Swift.Hashable {}
extension RapydSDK.RPDPaymentOutcomeType : Swift.Equatable {}
extension RapydSDK.RPDPaymentOutcomeType : Swift.Hashable {}
extension RapydSDK.RPDPaymentOutcomeRiskLevel : Swift.Equatable {}
extension RapydSDK.RPDPaymentOutcomeRiskLevel : Swift.Hashable {}
extension RapydSDK.RPDPaymentOutcomeReason : Swift.Equatable {}
extension RapydSDK.RPDPaymentOutcomeReason : Swift.Hashable {}
extension RapydSDK.TrasferStatus : Swift.Equatable {}
extension RapydSDK.TrasferStatus : Swift.Hashable {}
extension RapydSDK.TrasferStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDPlanInterval : Swift.Equatable {}
extension RapydSDK.RPDPlanInterval : Swift.Hashable {}
extension RapydSDK.RPDPlanUsageType : Swift.Equatable {}
extension RapydSDK.RPDPlanUsageType : Swift.Hashable {}
extension RapydSDK.RPDPlanAggregateUsage : Swift.Equatable {}
extension RapydSDK.RPDPlanAggregateUsage : Swift.Hashable {}
extension RapydSDK.RPDPlanBillingScheme : Swift.Equatable {}
extension RapydSDK.RPDPlanBillingScheme : Swift.Hashable {}
extension RapydSDK.RPDPlanTiersMode : Swift.Equatable {}
extension RapydSDK.RPDPlanTiersMode : Swift.Hashable {}
extension RapydSDK.RPDPlanTransformUsageRound : Swift.Equatable {}
extension RapydSDK.RPDPlanTransformUsageRound : Swift.Hashable {}
extension RapydSDK.TransferReplyType : Swift.Equatable {}
extension RapydSDK.TransferReplyType : Swift.Hashable {}
extension RapydSDK.TransferReplyType : Swift.RawRepresentable {}
extension RapydSDK.RPDProductType : Swift.Equatable {}
extension RapydSDK.RPDProductType : Swift.Hashable {}
extension RapydSDK.KeychainItemAccessibility : Swift.Equatable {}
extension RapydSDK.KeychainItemAccessibility : Swift.Hashable {}
extension RapydSDK.Algorithm : Swift.Equatable {}
extension RapydSDK.Algorithm : Swift.Hashable {}
extension RapydSDK.RPDEWallet.EWalletPaymentType : Swift.Equatable {}
extension RapydSDK.RPDEWallet.EWalletPaymentType : Swift.Hashable {}
extension RapydSDK.RPDEWallet.EWalletPaymentType : Swift.RawRepresentable {}
@available(*, deprecated, message: "Use RPDUserStatus")
extension RapydSDK.UserStatus : Swift.Equatable {}
@available(*, deprecated, message: "Use RPDUserStatus")
extension RapydSDK.UserStatus : Swift.Hashable {}
@available(*, deprecated, message: "Use RPDUserStatus")
extension RapydSDK.UserStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDWalletType : Swift.Equatable {}
extension RapydSDK.RPDWalletType : Swift.Hashable {}
extension RapydSDK.RPDWalletType : Swift.RawRepresentable {}
extension RapydSDK.RPDUserStatus : Swift.Equatable {}
extension RapydSDK.RPDUserStatus : Swift.Hashable {}
extension RapydSDK.RPDUserStatus : Swift.RawRepresentable {}
extension RapydSDK.RPDClientWalletType : Swift.Equatable {}
extension RapydSDK.RPDClientWalletType : Swift.Hashable {}
extension RapydSDK.RPDClientWalletType : Swift.RawRepresentable {}
